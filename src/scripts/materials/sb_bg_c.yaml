type: ShaderMaterial
params:
  vertexShader: >
      varying vec2 vUv;
      uniform float opacity;
      uniform float cell_scale;

      void main() {
          vUv = uv;
          vec4 pos = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
          gl_Position = vec4(position * 2., 1.);
      }

  fragmentShader: >

    uniform float time;
    uniform vec2 resolution;

    vec2 hash22(vec2 p){
      vec3 p3=fract(vec3(p.xyx)*vec3(.1031,.1030,.0973));
      p3+=dot(p3,p3.yzx+33.33);
      return fract((p3.xx+p3.yz)*p3.zy);
    }
    vec2 hash(vec2 p,float a){
      p+=time*a+dot(hash22(p),vec2(1));
      return mix(hash22(floor(p)),hash22(ceil(p)),smoothstep(0.,1.,fract(p)));
    }
    float voronoi(vec2 p){
      vec2 g=floor(p);vec2 f=fract(p);float dist=1.;
      for(int y=-1;y<=1;y++)for(int x=-1;x<=1;x++)
        dist=min(dist,distance(vec2(x,y)+hash(g+vec2(x,y),1.),f));
      return dist;
    }
    float perlin(vec2 p){
      vec2 g=floor(p);vec2 f=fract(p);vec2 s=smoothstep(0.,1.,f);const float a=.2;
      return mix(
        mix(dot(hash(g+vec2(0,0),a),f-vec2(0,0)),dot(hash(g+vec2(1,0),a),f-vec2(1,0)),s.x),
        mix(dot(hash(g+vec2(0,1),a),f-vec2(0,1)),dot(hash(g+vec2(1,1),a),f-vec2(1,1)),s.x),
      s.y);
    }

    void main(){
      vec2 st=gl_FragCoord.xy/resolution;
      vec2 uv=st*2.-1.;uv.x*=resolution.x/resolution.y;
      
      float dist=1./abs((voronoi(uv*16.+time)+perlin(uv*.3-time*.1)*8.)*16.);
      vec3 col=sin(time+vec3(0,2.1,4.2)+perlin(uv*.5+time*.05)*4.)*.5+.5;
      
      gl_FragColor =vec4(dist*col*1.5,1);
    }

  transparent: true
  blending: 1
  uniforms: 
    opacity: 
      type: f
      value: 1
    map:
      type: time;
