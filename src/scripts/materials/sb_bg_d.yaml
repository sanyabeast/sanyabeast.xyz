type: ShaderMaterial
params:
  vertexShader: >
      varying vec2 vUv;
      uniform float opacity;
      uniform float cell_scale;

      void main() {
          vUv = uv;
          vec4 pos = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
          gl_Position = vec4(position * 2., 1.);
      }

  fragmentShader: >

    uniform float time;
    uniform vec2 resolution;


    float vortex(vec2 uv, float dist, float seed, float bias, float offset)
    {
        float ang = atan(uv.y, uv.x)+sin(dist+0.1*seed)*(1.2-offset)*2.0;
        ang += 3.14159*(0.01*seed);
        return clamp((sin((ang)*(3.0+offset*float(6)))+bias)/(1.0+bias), 0.0, 1.0);
    }
    void mainImage( out vec4 fragColor, in vec2 fragCoord )
    {
        vec2 uv = (fragCoord-vec2(resolution.xy*0.5))/resolution.y;
        float texel = 1.0/resolution.y;
        float dist = length(uv);
        vec3 col = vec3(.0, .0, .0);
        for (int i=0; i<6; i++) 
        {
            float offset = float(i)/float(6);
            float seed = 1000.0*fract(3.1379136*floor(time*0.25+offset));
            float time = fract(time*0.25+offset);
            vec2 cccc = vec2(0.0, time*1.8);
            float maskA = vortex(uv, dist, seed+100.0*float(i), -0.998+texel, offset);
            float dist2 = length(uv+cccc);
            float maskB = vortex(uv+cccc, dist2, seed+42.0*float(i), -0.99+texel, offset);
            float radius = pow(((maskA*maskA)+(maskB*maskB)), 2.0);
            float fade = time*(1.0-time);
            float mask = maskA*maskB*fade*radius;
            col = mix(col, vec3(1.50+2.0*dist-1.2*offset-1.1*radius, 0.75-0.5*offset-0.5*dist, 1.0-0.8*dist), mask);
            col = max(vec3(maskA*0.0, maskB*0.0+0.1, max(maskA*0.0*2.0, maskB*0.0)+0.12)*fade, col);
        }
        fragColor = vec4(col*3.0,5.0);
    }

    void main(void)
    {
        mainImage(gl_FragColor, gl_FragCoord.xy);
    }
  transparent: true
  blending: 1
  uniforms: 
    opacity: 
      type: f
      value: 1
    map:
      type: time;
